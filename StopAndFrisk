import java.util.ArrayList;

/**
 * The StopAndFrisk class represents stop-and-frisk data, provided by
 * the New York Police Department (NYPD), that is used to compare
 * during when the policy was put in place and after the policy ended.
 * 
 * @author Tanvi Yamarthy
 * @author Vidushi Jindal
 */
public class StopAndFrisk {

    /*
     * The ArrayList keeps track of years that are loaded from CSV data file.
     * Each SFYear corresponds to 1 year of SFRecords. 
     * Each SFRecord corresponds to one stop and frisk occurrence.
     */ 
    private ArrayList<SFYear> database; 

    /*
     * Constructor creates and initializes the @database array
     * 
     * DO NOT update nor remove this constructor
     */
    public StopAndFrisk () {
        database = new ArrayList<>();
    }

    /*
     * Getter method for the database.
     * *** DO NOT REMOVE nor update this method ****
     */
    public ArrayList<SFYear> getDatabase() {
        return database;
    }

    /**
     * This method reads the records information from an input csv file and populates 
     * the database.
     * 
     * Each stop and frisk record is a line in the input csv file.
     * 
     * 1. Open file utilizing StdIn.setFile(csvFile)
     * 2. While the input still contains lines:
     *    - Read a record line (see assignment description on how to do this)
     *    - Create an object of type SFRecord containing the record information
     *    - If the record's year has already is present in the database:
     *        - Add the SFRecord to the year's records
     *    - If the record's year is not present in the database:
     *        - Create a new SFYear 
     *        - Add the SFRecord to the new SFYear
     *        - Add the new SFYear to the database ArrayList
     * 
     * @param csvFile
     */
    public void readFile ( String csvFile ) {

        // DO NOT remove these two lines
        StdIn.setFile(csvFile); // Opens the file
        StdIn.readLine();  
        
            while(!StdIn.isEmpty())
            {
                String[] recordEntries = StdIn.readLine().split(",");

                int year = Integer.parseInt(recordEntries[0]);
                
                String description = recordEntries[2];
                
                String gender = recordEntries[52];
                
                String race = recordEntries[66];
                
                String location = recordEntries[71];
                String a=new String("Y");
                
                
                Boolean arrested = recordEntries[13].equals(a);
                
                Boolean frisked = recordEntries[16].equals(a);
            SFRecord record = new SFRecord(description,arrested,frisked,gender,race,location);
            // Check if the year already exists in the database
             
            boolean foundYear = false;
            for (SFYear sfYear : database) {
                if (sfYear.getcurrentYear()==(year)) {
                    sfYear.addRecord(record);
                    foundYear = true;
                    break;
                }
            }

            // If the year doesn't exist, create a new SFYear
            if (!foundYear) {
                SFYear newYear = new SFYear(year);
                newYear.addRecord(record);
                database.add(newYear);
            }
        }
    }
       

    

    /**
     * This method returns the stop and frisk records of a given year where 
     * the people that was stopped was of the specified race.
     * 
     * @param year we are only interested in the records of year.
     * @param race we are only interested in the records of stops of people of race. 
     * @return an ArrayList containing all stop and frisk records for people of the 
     * parameters race and year.
     */

    public ArrayList<SFRecord> populationStopped ( int year, String race ) {
        ArrayList<SFRecord> recordsOfRace = new ArrayList<>();

        for (SFYear sfYear : database) {
            if (sfYear.getcurrentYear() == year) {
                ArrayList<SFRecord> recordsOfYear = sfYear.getRecordsForYear();
                for (SFRecord record : recordsOfYear) {
                    if (record.getRace().equals(race)) {
                        recordsOfRace.add(record);
                    }
                }
                break;
            }
        }

        return recordsOfRace;
    }

    /**
     * This method computes the percentage of records where the person was frisked and the
     * percentage of records where the person was arrested.
     * 
     * @param year we are only interested in the records of year.
     * @return the percent of the population that were frisked and the percent that
     *         were arrested.
     */
    public double[] friskedVSArrested ( int year ) {
        
        double[] percentages = new double[2];
        int friskedCount = 0;
        int arrestedCount = 0;
        int totalRecords = 0;

        for (SFYear sfYear : database) {
            if (sfYear.getcurrentYear() == year) {
                ArrayList<SFRecord> recordsOfYear = sfYear.getRecordsForYear();
                for (SFRecord record : recordsOfYear) {
                    totalRecords++;
                    if (record.getFrisked()) {
                        friskedCount++;
                    }
                    if (record.getArrested()) {
                        arrestedCount++;
                    }
                }
                break;
            }
        }

        if (totalRecords > 0) {
            percentages[0] = (friskedCount / (double)totalRecords) * 100;
            percentages[1] = (arrestedCount / (double)totalRecords) * 100;
        }

        return percentages;

    }

    /**
     * This method keeps track of the fraction of Black females, Black males,
     * White females and White males that were stopped for any reason.
     * Drawing out the exact table helps visualize the gender bias.
     * 
     * @param year we are only interested in the records of year.
     * @return a 2D array of percent of number of White and Black females
     *         versus the number of White and Black males.
     */
    public double[][] genderBias ( int year ) {

        double blackMales = 0.0, blackFemales = 0.0, whiteMales = 0.0, whiteFemales = 0.0, totalBlack = 0.0, totalWhite = 0.0;
        double[][] percentagesTable = new double[2][3];
        SFYear currYear;
        ArrayList<SFRecord> allRecords = new ArrayList<SFRecord>();
        for (SFYear sfYear : database) {
            if(sfYear.getcurrentYear()==year){
                currYear=sfYear;
                allRecords=currYear.getRecordsForYear();
                break;
            }
        }
            for(SFRecord record:allRecords)
            {
                if (record.getRace().equals(("B")))
                {
                    totalBlack++;
                    if(record.getGender().equals("M")){
                        blackMales++;
                    }
                    else if(record.getGender().equals("F")){
                        blackFemales++;
                    }
                }
                else if(record.getRace().equals("W")){
                    totalWhite++;
                    if(record.getGender().equals("M")){
                        whiteMales++;
                    }
                    else if(record.getGender().equals("F")){
                        whiteFemales++;
                    }
                }
            }
            percentagesTable[0][0]=((blackFemales/totalBlack)*0.5*100.0);
            percentagesTable[0][1]=((whiteFemales/totalWhite)*0.5*100.0);
            percentagesTable[0][2]=((blackFemales/totalBlack)*0.5*100.0)+((whiteFemales/totalWhite)*0.5*100.0);
            percentagesTable[1][0]=((blackMales/totalBlack)*0.5*100.0);
            percentagesTable[1][1]=((whiteMales/totalWhite)*0.5*100.0);
            percentagesTable[1][2]=((blackMales/totalBlack)*0.5*100.0)+((whiteMales/totalWhite)*0.5*100.0);
            return percentagesTable;
        
    }
    /**
     * This method checks to see if there has been increase or decrease 
     * in a certain crime from year 1 to year 2.
     * 
     * Expect year1 to preceed year2 or be equal.
     * 
     * @param crimeDescription
     * @param year1 first year to compare.
     * @param year2 second year to compare.
     * @return 
     */

    public double crimeIncrease ( String crimeDescription, int year1, int year2 ) {
        double percentageChange=0.0;
        if(year1==year2){
            return 0.0;
        }
        SFYear a1;
        ArrayList<SFRecord> a1Records= new ArrayList<SFRecord>();
        SFYear a2;
        ArrayList<SFRecord> a2Records= new ArrayList<SFRecord>();
        
       
        for (SFYear sfYear : database) {
            if (sfYear.getcurrentYear() == year1) {
                a1=sfYear;
                a1Records=a1.getRecordsForYear();
                break;
            }
        }
        for (SFYear sfYear : database) {
            if (sfYear.getcurrentYear() == year2) {
                a2=sfYear;
                a2Records=a2.getRecordsForYear();
                break;
            }
        }
        double crimea1=0.0;
        double crimea2=0.0;
        for(SFRecord rec:a1Records){
            if(rec.getDescription().indexOf(crimeDescription)!=-1){
                crimea1=crimea1+1.0;
                
            }
        }
        for(SFRecord rec:a2Records){
            if(rec.getDescription().indexOf(crimeDescription)!=-1){
                crimea2+=1.0;
               
            }
        }
        double pera1=(crimea1/(a1Records.size()))*100.0;
        double pera2=(crimea2/(a2Records.size()) )*100.0;
        if(pera1>pera2){
            percentageChange=(pera1-pera2)*-1.0;
        }else if(pera1<pera2)
        {
            percentageChange=pera2-pera1;
        }
         return percentageChange;
    }

    /**
     * This method outputs the NYC borough where the most amount of stops 
     * occurred in a given year. This method will mainly analyze the five 
     * following boroughs in New York City: Brooklyn, Manhattan, Bronx, 
     * Queens, and Staten Island.
     * 
     * @param year we are only interested in the records of year.
     * @return the borough with the greatest number of stops
     */
    public String mostCommonBorough ( int year ) {

        int[] counts = new int[5];
        String[] boroughs = {"Brooklyn", "Manhattan", "Bronx", "Queens", "Staten Island"};
        for (SFYear sfYear : database) {
            if (sfYear.getcurrentYear() == year) {
                for (SFRecord record : sfYear.getRecordsForYear()) {
                    String location = record.getLocation();
                    for (int i = 0; i < boroughs.length; i++) {
                        if (location.equalsIgnoreCase(boroughs[i])) {
                            counts[i]++;
                            break;
                        }
                    }
                }
                break;
            }
        }
        int maxIndex = 0;
        for (int i = 1; i < counts.length; i++) {
            if (counts[i] > counts[maxIndex]) {
                maxIndex = i;
            }
        }
        return boroughs[maxIndex];
    }
}
